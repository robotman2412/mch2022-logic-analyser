
module top (
    input  wire      clk_in,
    input  wire      irq_n,
    
    input  wire      spi_mosi,
    output wire      spi_miso,
    input  wire      spi_clk,
    input  wire      spi_cs_n,
    
    input  wire[7:0] pmod,
    output wire      red_n,
    output wire      green_n,
    output wire      blue_n
);
    
    reg[7:0] clkdiv;
    reg[7:0] spi_recv;
    reg[7:0] spi_send;
    
    assign spi_miso = spi_cs_n ? 'bz : spi_send[7];
    
    assign red_n   = !(spi_recv[0] & clkdiv==0);
    assign green_n = !(spi_recv[1] & clkdiv==0);
    assign blue_n  = !(spi_recv[2] & clkdiv==0);
    
    initial begin
        spi_cs_n_last = 1;
    end
    
    // Dead simple clk div.
    always @(posedge clk_in) begin
        clkdiv <= clkdiv + 1;
    end
    
    // SPI Send.
    reg spi_cs_n_last;
    always @(negedge spi_clk | spi_cs_n) begin
        if (spi_cs_n_last && !spi_cs_n) begin
            spi_send <= 'h55;
        end else if (!spi_cs_n && spi_clk) begin
            spi_send[7:1] <= spi_send[6:0];
            spi_send[0]   <= 0;
        end
        spi_cs_n_last = spi_cs_n;
    end
    
    // SPI Recv.
    always @(posedge spi_clk) begin
        if (spi_cs_n == 0) begin
            spi_recv[7:1] <= spi_recv[6:0];
            spi_recv[0]   <= spi_mosi;
        end
    end
    
endmodule
